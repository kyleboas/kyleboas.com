name: Post Latest Blog from RSS to Bluesky

on:
  push:
    paths:
      - _posts/**
  workflow_dispatch:

jobs:
  fetch-and-post:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout (for the "new files only" gate)
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Gate: only run if new files were added under _posts/
      - name: Check for newly added files
        id: check_new_files
        shell: bash
        run: |
          set -euo pipefail
          git fetch --no-tags origin ${{ github.ref }} --depth=2
          added_files="$(git diff --name-status HEAD^ HEAD | awk '$1 == "A" {print $2}' | grep '^_posts/' || true)"
          if [ -z "$added_files" ]; then
            echo "No new posts detected."
            echo "has_new=false" >> "$GITHUB_OUTPUT"
          else
            echo "New posts detected:"
            echo "$added_files"
            echo "has_new=true" >> "$GITHUB_OUTPUT"
          fi

      # 3) Short delay to let your site/feed/CDN settle
      - name: Initial Delay
        if: steps.check_new_files.outputs.has_new == 'true'
        run: |
          echo "Waiting for 1 minute before starting..."
          sleep 60

      # 4) Tools
      - name: Install xmllint
        if: steps.check_new_files.outputs.has_new == 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils

      # 5) Fetch + normalize + validate for preview
      - name: Fetch Latest Blog Post (preview-only mode)
        id: fetch_post
        if: steps.check_new_files.outputs.has_new == 'true'
        shell: bash
        run: |
          set -euo pipefail

          RSS_FEED_URL="https://kyleboas.com/feed"
          response="$(curl -sfL "$RSS_FEED_URL")"

          title="$(echo "$response" | xmllint --xpath "string(//item[1]/title)" - | tr -d '\r' | xargs)"
          link_raw="$(echo "$response" | xmllint --xpath "string(//item[1]/link)" - | tr -d '\r' | xargs)"
          pub_date_raw="$(echo "$response" | xmllint --xpath "string(//item[1]/pubDate)" - | xargs)"

          # Require "today"
          pub_date_ymd="$(date -d "$pub_date_raw" +%Y-%m-%d || true)"
          today_ymd="$(date +%Y-%m-%d)"
          if [[ -z "$pub_date_ymd" || "$pub_date_ymd" != "$today_ymd" ]]; then
            echo "::error::Latest feed item is not from today ($pub_date_raw). Aborting because preview is required."
            exit 1
          fi

          # Clean & percent-encode stray spaces
          link_raw="$(printf '%s' "$link_raw" | awk '{$1=$1};1')"
          link_raw="${link_raw// /%20}"

          # Resolve final canonical URL (follow redirects)
          final_url="$(curl -sIL -o /dev/null -w '%{url_effective}' "$link_raw" || true)"
          if [[ -z "$final_url" ]]; then
            final_url="$link_raw"
          fi

          # Enforce HTTPS (upgrade http -> https if reachable)
          if [[ "$final_url" =~ ^http:// ]]; then
            https_url="$(echo "$final_url" | sed 's|^http://|https://|')"
            code_https="$(curl -sIL -o /dev/null -w '%{http_code}' "$https_url" || true)"
            if [[ "$code_https" =~ ^2|3 ]]; then
              final_url="$https_url"
            fi
          fi

          # Re-resolve after upgrade to capture last hop
          final_url="$(curl -sIL -o /dev/null -w '%{url_effective}' "$final_url" || echo "$final_url")"

          # Strict checks for Bluesky external embed
          #  - must be HTTPS
          #  - host must be kyleboas.com (adjust if you want to allow others)
          #  - must be reachable (2xx/3xx)
          if [[ ! "$final_url" =~ ^https://[^[:space:]]+$ ]]; then
            echo "::error::Final URL is not a strict HTTPS absolute URI: '$final_url'"
            exit 1
          fi

          if [[ ! "$final_url" =~ ^https://(www\.)?kyleboas\.com/ ]]; then
            echo "::error::Final URL host is not kyleboas.com: '$final_url'"
            exit 1
          fi

          code="$(curl -sIL -o /dev/null -w '%{http_code}' "$final_url" || true)"
          if [[ ! "$code" =~ ^2|3 ]]; then
            echo "::error::Final URL is not reachable (HTTP $code): '$final_url'"
            exit 1
          fi

          # Compose "Title URL" under ~300 chars total
          max_total=300
          reserve=$(( ${#final_url} + 1 ))
          max_title_len=$(( max_total - reserve ))
          if (( max_title_len < 1 )); then
            echo "::error::Final URL too long to fit in a post with title."
            exit 1
          fi
          if (( ${#title} > max_title_len )); then
            ell="â€¦"
            cut=$(( max_title_len - ${#ell} ))
            if (( cut < 1 )); then
              echo "::error::Title cannot be truncated safely to fit with URL."
              exit 1
            fi
            title="${title:0:cut}${ell}"
          fi 

          text="$title $final_url"

          {
            echo "text<<EOF"
            echo "$text"
            echo "EOF"
            echo "final_url=$final_url"
          } >> "$GITHUB_OUTPUT"

      # 6) Post WITH preview card ONLY (no fallback)
      - name: Post to Bluesky (preview required)
        uses: myConsciousness/bluesky-post@v5
        with:
          text: ${{ steps.fetch_post.outputs.text }}
          link-preview-url: ${{ steps.fetch_post.outputs.final_url }}
          identifier: kyleboas.com
          password: ${{ secrets.BSS }}
          retry-count: 3