name: Post Latest Blog from RSS to Bluesky

on:
  push:
    paths:
      - _posts/**
  workflow_dispatch:

jobs:
  fetch-and-post:
    runs-on: ubuntu-latest

    steps:
      # 1) Repo checkout (used for the "new files only" gate)
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Gate: only run if new files were added under _posts/
      - name: Check for newly added files
        id: check_new_files
        shell: bash
        run: |
          set -euo pipefail
          git fetch --no-tags origin ${{ github.ref }} --depth=2
          added_files="$(git diff --name-status HEAD^ HEAD | awk '$1 == "A" {print $2}' | grep '^_posts/' || true)"
          if [ -z "$added_files" ]; then
            echo "No new posts detected."
            echo "has_new=false" >> "$GITHUB_OUTPUT"
          else
            echo "New posts detected:"
            echo "$added_files"
            echo "has_new=true" >> "$GITHUB_OUTPUT"
          fi

      # 3) Small delay (lets your site/feed/CDN settle)
      - name: Initial Delay
        if: steps.check_new_files.outputs.has_new == 'true'
        run: |
          echo "Waiting for 1 minute before starting..."
          sleep 60

      # 4) Tools
      - name: Install xmllint
        if: steps.check_new_files.outputs.has_new == 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils

      # 5) Fetch title + permalink + pubDate, normalize date, resolve canonical URL, enforce HTTPS
      - name: Fetch Latest Blog Post
        id: fetch_post
        if: steps.check_new_files.outputs.has_new == 'true'
        shell: bash
        run: |
          set -euo pipefail

          RSS_FEED_URL="https://kyleboas.com/feed"
          response="$(curl -sfL "$RSS_FEED_URL")"

          title="$(echo "$response" | xmllint --xpath "string(//item[1]/title)" - | tr -d '\r' | xargs)"
          link_raw="$(echo "$response" | xmllint --xpath "string(//item[1]/link)" - | tr -d '\r' | xargs)"
          pub_date_raw="$(echo "$response" | xmllint --xpath "string(//item[1]/pubDate)" - | xargs)"

          # Only post if the latest item is today (server-local day)
          pub_date_ymd="$(date -d "$pub_date_raw" +%Y-%m-%d || true)"
          today_ymd="$(date +%Y-%m-%d)"
          if [[ -z "$pub_date_ymd" || "$pub_date_ymd" != "$today_ymd" ]]; then
            echo "Latest feed item is not from today ($pub_date_raw). Skipping."
            echo "should_post=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Clean raw link (collapse/trim whitespace, encode spaces)
          link_raw="$(printf '%s' "$link_raw" | awk '{$1=$1};1')"
          link_raw="${link_raw// /%20}"

          # Resolve to canonical final URL (follow redirects)
          final_url="$(curl -sIL -o /dev/null -w '%{url_effective}' "$link_raw" || true)"
          if [[ -z "$final_url" ]]; then
            final_url="$link_raw"
          fi

          # If http://, try upgrading to https:// and keep it if reachable
          if [[ "$final_url" =~ ^http:// ]]; then
            https_url="${final_url/http:\/\//https://}"
            code_https="$(curl -sIL -o /dev/null -w '%{http_code}' "$https_url" || true)"
            if [[ "$code_https" =~ ^(2|3)[0-9]{2}$ ]]; then
              final_url="$https_url"
            fi
          fi

          # One more resolve to ensure we captured the last hop (after http->https upgrade)
          final_url="$(curl -sIL -o /dev/null -w '%{url_effective}' "$final_url" || echo "$final_url")"

          # *** CRITICAL: strip CR/LF + surrounding whitespace ***
          final_url="$(printf '%s' "$final_url" | tr -d '\r\n' | awk '{$1=$1};1')"

          # Strict HTTPS absolute-URI check (Bluesky embed requirement)
          can_embed=false
          if [[ "$final_url" =~ ^https://[[:graph:]]+$ ]]; then
            # Ensure it's reachable (2xx/3xx)
            code="$(curl -sIL -o /dev/null -w '%{http_code}' "$final_url" || true)"
            if [[ "$code" =~ ^(2|3)[0-9]{2}$ ]]; then
              can_embed=true
            fi
          fi

          # Compose text as: "Title ␣ URL", capped to ~300 chars total
          max_total=300
          reserve=$(( ${#final_url} + 1 ))
          max_title_len=$(( max_total - reserve ))
          if (( max_title_len < 1 )); then
            echo "Final URL too long to fit in a post. Skipping."
            echo "should_post=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if (( ${#title} > max_title_len )); then
            # Leave room for an ellipsis
            ell="…"
            cut=$(( max_title_len - ${#ell} ))
            title="${title:0:cut}${ell}"
          fi
          text="$title $final_url"

          {
            echo "should_post=true"
            echo "can_embed=$can_embed"
            # use multiline blocks for BOTH outputs to avoid any parsing issues
            echo "final_url<<EOF"
            echo "$final_url"
            echo "EOF"
            echo "text<<EOF"
            echo "$text"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # (Optional) Debug - see exactly what we pass to the action
      - name: Debug final URL
        if: steps.fetch_post.outputs.should_post == 'true'
        run: |
          echo "::notice::final_url='${{ steps.fetch_post.outputs.final_url }}'"
          printf 'printf-quoted: %q\n' "${{ steps.fetch_post.outputs.final_url }}"

      # 6) Try WITH preview card (external embed)
      - name: Post with link preview
        id: post_with_embed
        if: steps.fetch_post.outputs.should_post == 'true' && steps.fetch_post.outputs.can_embed == 'true'
        continue-on-error: true
        uses: myConsciousness/bluesky-post@v5
        with:
          text: ${{ steps.fetch_post.outputs.text }}
          link-preview-url: ${{ steps.fetch_post.outputs.final_url }}
          identifier: kyleboas.com
          password: ${{ secrets.BSS }}
          retry-count: 3

      # 7) Fallback: post text-only if embed was skipped or failed
      - name: Post without preview (fallback)
        if: steps.fetch_post.outputs.should_post == 'true' && (steps.fetch_post.outputs.can_embed != 'true' || steps.post_with_embed.outcome == 'failure')
        uses: myConsciousness/bluesky-post@v5
        with:
          text: ${{ steps.fetch_post.outputs.text }}
          identifier: kyleboas.com
          password: ${{ secrets.BSS }}
          retry-count: 3