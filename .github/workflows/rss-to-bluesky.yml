name: Post Latest Blog from RSS to Bluesky

on:
  push:
    paths:
      - _posts/**

  workflow_dispatch:

jobs:
  fetch-and-post:
    runs-on: ubuntu-latest

    steps:
      # Initial two-minute delay
      - name: Initial Delay
        run: |
          echo "Waiting for 1 minute before starting..."
          sleep 60

      # Install required tools
      - name: Install xmllint and dateutils
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils dateutils

      # Fetch the latest blog post from RSS feed
      - name: Fetch Latest Blog Post
        id: fetch_post
        run: |
          RSS_FEED_URL="https://kyleboas.com/feed"
          
          # Fetch RSS feed
          response=$(curl -s "$RSS_FEED_URL")

          # Parse the first <item> (Debugging)
          first_item=$(echo "$response" | xmllint --xpath "//item[1]" - 2>/dev/null || echo "PARSE_ERROR")
          echo "First Item: $first_item"

          # Parse specific fields from the first <item>
          title=$(echo "$response" | xmllint --xpath "string(//item[1]/title)" - 2>/dev/null || echo "PARSE_ERROR")
          url=$(echo "$response" | xmllint --xpath "string(//item[1]/link)" - 2>/dev/null || echo "PARSE_ERROR")
          pub_date=$(echo "$response" | xmllint --xpath "string(//item[1]/pubDate)" - 2>/dev/null || echo "PARSE_ERROR")

          # Log parsed data
          echo "Parsed Data - title: $title, URL: $url, PubDate: $pub_date"

          # Handle parsing errors
          if [[ "$title" == "PARSE_ERROR" || "$url" == "PARSE_ERROR" || "$pub_date" == "PARSE_ERROR" ]]; then
            echo "Error: Failed to parse one or more required fields from the RSS feed. Exiting."
            exit 1
          fi

          # Extract and compare dates
          today=$(date -R)
          pub_date_only=$(echo "$pub_date" | awk '{print $1", "$2" "$3" "$4}')
          today_only=$(echo "$today" | awk '{print $1", "$2" "$3" "$4}')
          
          echo "Today's Date: $today_only"
          echo "Publication Date: $pub_date_only"

          if [[ "$pub_date_only" != "$today_only" ]]; then
            echo "The blog post is not from today ($pub_date_only). Exiting."
            exit 0
          fi

          # Format and export environment variables
          title=$(echo "$title" | xargs)
          preview="$title $url"

          echo "preview=$preview" >> $GITHUB_ENV
          echo "rss_url=$url" >> $GITHUB_ENV

      # Post to Bluesky
      - name: Post to Bluesky
        uses: myConsciousness/bluesky-post@v5
        with:
          text: "${{ env.preview }}"
          link-preview-url: "${{ env.rss_url }}"
          identifier: kyleboas.com
          password: ${{ secrets.BSS }}

      # Debug step: Print environment variables (optional, remove after debugging)
      - name: Debug Environment Variables
        run: |
          echo "Preview Text: ${{ env.preview }}"
          echo "RSS URL: ${{ env.rss_url }}"